package assignment3;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/*
 * A symbol table implemented with a binary search tree.
*  @author Olivia Denbu Wilhelmsson
*/
public class Program
{
	public static void main(String[] args) throws FileNotFoundException
	{
	    BinarySearchTree tree = new BinarySearchTree();
		int size = getWantedSize();
		File file = getFile();
		
		init(tree, size, file);
	}
	
	private static void init(BinarySearchTree tree, int size, File file) throws FileNotFoundException
	{ 
	    setTree(tree, size, file);
	    
	    boolean wantsAlphabeticOrder = getUserAnswer();
	    
	    System.out.println();
	    System.out.println("*************************************");
	    System.out.println("Binary search tree");
	    System.out.println("*************************************");
	    
	    if(wantsAlphabeticOrder == true)
	    	tree.printAlphabeticOrder();
	    else
	    	tree.printReversedOrder();
	}
	
	private static File getFile()
	{
		return new File("C:\\Users\\Admin\\Desktop\\text_big.txt");
	}
	
	private static void setTree(BinarySearchTree tree, int size, File file) throws FileNotFoundException
	{
	    Scanner input = new Scanner(file);
		int countWords = 0;
		String word;
		long startTime = System.nanoTime();
		
		while (input.hasNext() && countWords < size)
		{
		     word = input.next().toLowerCase();
		     tree.insert(word, tree.root);
		     //tree.put(word);
		     countWords++;
		}
		
		long stopTime = System.nanoTime();
		long executionTime = getExecutionTime(startTime, stopTime);
		
		Print("Execution time:\t" + executionTime + " ms");
		System.out.println();
	}
	
	private static long getExecutionTime(long startTime, long stopTime)
	{
		return (stopTime - startTime)/1000000;
	}
	
	private static boolean getUserAnswer()
	{
		Print("Alphabetic or Reversed:\t");
		Scanner in = new Scanner(System.in);
		String answer = in.nextLine();
		in.close();
		
		// TODO använd ev denna istället
		// return answer.equals("A"); 
		
		if (answer.compareTo("A") == 0)
			return true;
		else
			return false;
	}
	
	private static int getWantedSize()
	{
		return 200;
		//return 1000;
		//return 5000;
		//return 10000;
		//return 100000;
		//return 1000000;
	}
	
	private static void Print(String text)
	{
		System.out.print(text);
	}
	
	private static void test(BinarySearchTree tree)
	{
		tree.insert("M", tree.root);
		tree.insert("A", tree.root);
		tree.insert("A", tree.root);
		tree.insert("X", tree.root);
		tree.insert("B", tree.root);
		tree.insert("C", tree.root);
		tree.insert("C", tree.root);
		tree.insert("C", tree.root);
		tree.printAlphabeticOrder();
		//tree.printReversedOrder();
	}

}
